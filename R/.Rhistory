ggplot(data=df_cumsum, aes(x=dose, y=len, fill=supp)) +
geom_bar(stat="identity")+
geom_text(aes(y=label_ypos, label=len), vjust=1.6,
color="white", size=3.5)+
scale_fill_brewer(palette="Paired")+
theme_minimal()
df_cumsum <- ddply(df2 "dose",
transform,
label_ypos=cumsum(len) - 0.5*len)
# Create the barplot
ggplot(data=df_cumsum, aes(x=dose, y=len, fill=supp)) +
geom_bar(stat="identity")+
geom_text(aes(y=label_ypos, label=len), vjust=1.6,
color="white", size=3.5)+
scale_fill_brewer(palette="Paired")+
theme_minimal()
df_cumsum <- ddply(df2, "rank",
transform,
label_ypos=cumsum(probability) - 0.5*probability)
# Create the barplot
ggplot(data=df_cumsum, aes(x=rank, y=probability, fill=treatment)) +
geom_bar(stat="identity")+
geom_text(aes(y=label_ypos, label=round(probability,2)), vjust=1.6,
color="white", size=3.5)+
scale_fill_brewer(palette="Paired")+
theme_minimal()
cumsum(probability)
df_cumsum <- ddply(df2, "rank",
transform,
label_ypos=cumsum(probability) - 0.5*probability)
df_cumsum
help(network.data)
network <- with(MACE_data, network.data(Outcomes = Outcomes, Study = Study, Treat = Treat, N = N, response = "binomial", Treat.order =  c("Culprit vessel only", "Multivessel - Index", "Multivessel - Staged"), covariate = fup, covariate.model = "independent", rank.preference = "lower"))
result <- network.run(network)
summary(result)
Outcomes <- c(23, 121, 272, 426, 14, 30, 40, 68, 28, 14, 11, 6, 15, 13, 42, 21, 53, 10, 12, 36, 61, 3, 1, 17, 15)
N <- c(295, 590, 2016, 2025, 150, 146, 314, 313, 79, 40, 52, 17, 65, 65, 84, 234, 231, 48, 44, 264, 263, 46, 43, 106, 108)
Study <- c("COMPARE-ACUTE", "COMPARE-ACUTE", "COMPLETE", "COMPLETE", "CvLPRIT", "CvLPRIT", "DANAMI-3-PRIMULTI", "DANAMI-3-PRIMULTI", "Ghani et al", "Ghani et al", "HELP AMI", "HELP AMI", "Politi et al", "Politi et al", "Politi et al", "PRAMI", "PRAMI", "PRIMA", "PRIMA", "SMILE", "SMILE", "Tarasov RS et al", "Tarasov RS et al", "Prague 13", "Prague 13")
Treat <- c("MV-Index", "COI", "MV-Index", "MV-Staged", "MV-Index", "COI", "MV-Staged", "COI", "MV-Staged", "COI", "MV-Index", "COI", "MV-Index", "MV-Staged", "COI", "MV-Index", "COI", "MV-Index", "MV-Staged", "MV-Index", "MV-Staged", "MV-Index", "MV-Staged", "MV-Staged", "COI")
fup <- c(12, 36, 12, 27, 36, 12, 30, 23, 6, 12, 6, 38)
MACE_data <- list(Outcomes = Outcomes, N = N, Study = Study, Treat = Treat, covariate = fup)
set.seed(1)
network <- with(MACE_data, network.data(Outcomes = Outcomes, Study = Study, Treat = Treat, N = N, response = "binomial", Treat.order =  c("COI", "MV-Index", "MV-Staged"), covariate = fup, covariate.model = "independent", rank.preference = "lower"))
result <- network.run(network)
summary(result)
library(ggplot2)
library(plyr)
rank <- rank.tx(result)
df2 <- data.frame(treatment=rep(c("COI", "MV-Index", "MV-Staged"), each=3),
rank=rep(c(1, 2, 3),3),
probability= matrix(rank, ncol = 1))
# Calculate the cumulative sum of len for each dose
df_cumsum <- ddply(df2, "rank",
transform, label_ypos=cumsum(probability))
# Create the barplot
ggplot(data=df_cumsum, aes(x=rank, y=probability, fill=treatment)) +
geom_bar(stat="identity")+
geom_text(aes(y=label_ypos, label=round(probability,2)), vjust=1.6,
color="white", size=3.5)+
scale_fill_brewer(palette="Paired")+
theme_minimal()
df_cumsum <- ddply(df2, "rank",
transform,
label_ypos=cumsum(probability) - 0.5*probability)
# Create the barplot
ggplot(data=df_cumsum, aes(x=rank, y=probability, fill=treatment)) +
geom_bar(stat="identity")+
geom_text(aes(y=label_ypos, label=round(probability,2)), vjust=1.6,
color="white", size=3.5)+
scale_fill_brewer(palette="Paired")+
theme_minimal()
df_cumsum <- ddply(df2, "rank",
transform,
label_ypos=cumsum(probability) - 0.1*probability)
# Create the barplot
ggplot(data=df_cumsum, aes(x=rank, y=probability, fill=treatment)) +
geom_bar(stat="identity")+
geom_text(aes(y=label_ypos, label=round(probability,2)), vjust=1.6,
color="white", size=3.5)+
scale_fill_brewer(palette="Paired")+
theme_minimal()
ggplot(data=df2, aes(x=rank, y=probability, fill=treatment)) +
labs(title="Rankogram for MACE") +
geom_bar(stat="identity", position=position_dodge())+
geom_text(aes(label=round(probability, 2)), vjust=-0.5, color="black",
position = position_dodge(0.9), size=3.5)+
scale_fill_brewer(palette="Paired")+
theme_minimal()
df_cumsum <- ddply(df2, "rank",
transform, label_ypos=cumsum(probability))
ggplot(data=df_cumsum, aes(x=rank, y=probability, fill=treatment)) +
geom_bar(stat="identity")+
geom_text(aes(y=label_ypos, label=round(probablity, 2)), vjust=1.6,
color="white", size=3.5)+
scale_fill_brewer(palette="Paired")+
theme_minimal()
df_cumsum <- ddply(df2, "rank",
transform, label_ypos=cumsum(probability))
ggplot(data=df_cumsum, aes(x=rank, y=probability, fill=treatment)) +
geom_bar(stat="identity")+
geom_text(aes(y=label_ypos, label=round(probability, 2)), vjust=1.6,
color="white", size=3.5)+
scale_fill_brewer(palette="Paired")+
theme_minimal()
df_cumsum
df_cumsum <- ddply(df2, "rank",
transform, label_ypos=cumsum(probability) - 0.1*probability)
ggplot(data=df_cumsum, aes(x=rank, y=probability, fill=treatment)) +
geom_bar(stat="identity")+
geom_text(aes(y=label_ypos, label=round(probability, 2)), vjust=1.6,
color="white", size=3.5)+
scale_fill_brewer(palette="Paired")+
theme_minimal()
df_cumsum
df_cumsum <- ddply(df2, "rank",
transform, label_ypos=cumsum(probability) + 0.1*probability)
ggplot(data=df_cumsum, aes(x=rank, y=probability, fill=treatment)) +
geom_bar(stat="identity")+
geom_text(aes(y=label_ypos, label=round(probability, 2)), vjust=1.6,
color="white", size=3.5)+
scale_fill_brewer(palette="Paired")+
theme_minimal()
# Calculate the cumulative sum of len for each dose
df_cumsum <- ddply(df2, "rank",
transform, label_ypos=cumsum(probability) + 0.1*probability)
ggplot(data=df_cumsum, aes(x=rank, y=probability, fill=treatment)) +
geom_bar(stat="identity")+
geom_text(aes(y=label_ypos, label=round(probability, 2)), vjust=1.6,
color="black", size=3.5)+
scale_fill_brewer(palette="Paired")+
theme_minimal()
# Calculate the cumulative sum of len for each dose
df_cumsum <- ddply(df2, "rank",
transform, label_ypos=cumsum(probability) - 0.1*probability)
ggplot(data=df_cumsum, aes(x=rank, y=probability, fill=treatment)) +
geom_bar(stat="identity")+
geom_text(aes(y=label_ypos, label=round(probability, 2)), vjust=1.6,
color="black", size=3.5)+
scale_fill_brewer(palette="Paired")+
theme_minimal()
df_cumsum <- ddply(df2, "rank",
transform, label_ypos=cumsum(probability))
ggplot(data=df_cumsum, aes(x=rank, y=probability, fill=treatment)) +
geom_bar(stat="identity")+
geom_text(aes(y=label_ypos, label=round(probability, 2)), vjust=1.6,
color="black", size=3.5)+
scale_fill_brewer(palette="Paired")+
theme_minimal()
df2
df_cumsum
df_cumsum <- ddply(df2, "rank",
transform,
label_ypos=cumsum(probability) - 0.1*probability)
# Create the barplot
ggplot(data=df_cumsum, aes(x=rank, y=probability, fill=treatment)) +
geom_bar(stat="identity")+
geom_text(aes(y=label_ypos, label=round(probability,2)), vjust=0.1,
color="black", size=3.5)+
scale_fill_brewer(palette="Paired")+
theme_minimal()
df_cumsum <- ddply(df2, "rank",
transform, label_ypos= 1- cumsum(probability))
ggplot(data=df_cumsum, aes(x=rank, y=probability, fill=treatment)) +
geom_bar(stat="identity")+
geom_text(aes(y=label_ypos, label=round(probability, 2)), vjust=1.6,
color="black", size=3.5)+
scale_fill_brewer(palette="Paired")+
theme_minimal()
df_cumsum <- ddply(df2, "rank",
transform, label_ypos= 1- cumsum(probability))
ggplot(data=df_cumsum, aes(x=rank, y=probability, fill=treatment)) +
geom_bar(stat="identity")+
geom_text(aes(y=label_ypos, label=round(probability, 2)), vjust= 0,
color="black", size=3.5)+
scale_fill_brewer(palette="Paired")+
theme_minimal()
df_cumsum <- ddply(df2, "rank",
transform, label_ypos= 1- cumsum(probability))
ggplot(data=df_cumsum, aes(x=rank, y=probability, fill=treatment)) +
geom_bar(stat="identity")+
geom_text(aes(y=label_ypos, label=round(probability, 2)), vjust= -0.1,
color="black", size=3.5)+
scale_fill_brewer(palette="Paired")+
theme_minimal()
df_cumsum <- ddply(df2, "rank",
transform, label_ypos= 1- cumsum(probability))
ggplot(data=df_cumsum, aes(x=rank, y=probability, fill=treatment)) +
geom_bar(stat="identity")+
geom_text(aes(y=label_ypos, label=round(probability, 2)), vjust= -1.0,
color="black", size=3.5)+
scale_fill_brewer(palette="Paired")+
theme_minimal()
# Calculate the cumulative sum of len for each dose
df_cumsum <- ddply(df2, "rank",
transform, label_ypos= 1- cumsum(probability))
ggplot(data=df_cumsum, aes(x=rank, y=probability, fill=treatment)) +
geom_bar(stat="identity")+
geom_text(aes(y=label_ypos, label=round(probability, 2)), vjust= 0,
color="black", size=3.5)+
scale_fill_brewer(palette="Paired")+
theme_minimal()
# Calculate the cumulative sum of len for each dose
df_cumsum <- ddply(df2, "rank",
transform, label_ypos= 1- cumsum(probability))
ggplot(data=df_cumsum, aes(x=rank, y=probability, fill=treatment)) +
geom_bar(stat="identity")+
geom_text(aes(y=label_ypos, label=round(probability, 2)), vjust= -1.0,
color="black", size=3.5)+
scale_fill_brewer(palette="Paired")+
theme_minimal()
# Calculate the cumulative sum of len for each dose
df_cumsum <- ddply(df2, "rank",
transform, label_ypos= 1- cumsum(probability))
ggplot(data=df_cumsum, aes(x=rank, y=probability, fill=treatment)) +
geom_bar(stat="identity")+
geom_text(aes(y=label_ypos, label=round(probability, 2)), vjust= 0,
color="black", size=3.5)+
scale_fill_brewer(palette="Paired")+
theme_minimal()
ggplot(data=df_cumsum, aes(x=rank, y=probability, fill=treatment)) +
geom_bar(stat="identity")+
scale_fill_brewer(palette="Paired")+
theme_minimal()
network.forest.plot(result, label.margin = 10, title.name = "A. MACE")
summary(result)
network_n1 <- with(MACE_data, nodesplit.network.data(Outcomes = Outcomes, Study = Study, Treat = Treat, N = N, response = "binomial", pair = c("MV-Index", "COI")))
result_n1 <- nodesplit.network.run(network_n1)
summary(result_n1)
Outcomes <- c(11, 6, 10, 12, 15, 13, 42, 28, 14, 21, 53, 3, 1, 14, 30, 40, 68, 17, 15, 23, 121, 36, 61, 272, 426)
N <- c(52, 17, 48, 44, 65, 65, 84, 79, 40, 234, 231, 46, 43, 150, 146, 314, 313, 106, 108, 295, 590, 264, 263, 2016, 2025)
Study <- c("HELP AMI", "HELP AMI", "PRIMA", "PRIMA", "Politi et al", "Politi et al", "Politi et al", "Ghani et al", "Ghani et al", "PRAMI", "PRAMI", "Tarasov RS et al", "Tarasov RS et al", "CvLPRIT", "CvLPRIT", "DANAMI-3-PRIMULTI", "DANAMI-3-PRIMULTI", "PRAGUE 13", "PRAGUE 13", "COMPARE-ACUTE", "COMPARE-ACUTE", "SMILE", "SMILE", "COMPLETE", "COMPLETE")
Treat <- c("MV-Index", "COI", "MV-Index", "MV-Staged", "MV-Index", "MV-Staged", "COI", "MV-Staged", "COI", "MV-Index", "COI", "MV-Index", "MV-Staged", "MV-Index", "COI", "MV-Staged", "COI", "MV-Staged", "COI", "MV-Index", "COI", "MV-Index", "MV-Staged", "MV-Index", "MV-Staged")
fup <- c(12, 6, 30, 36, 23, 6, 12, 27, 38, 12, 12, 36)
MACE_data <- list(Outcomes = Outcomes, N = N, Study = Study, Treat = Treat, covariate = fup)
library(bnma)
network <- with(MACE_data, network.data(Outcomes = Outcomes, Study = Study, Treat = Treat, N = N, response = "binomial", Treat.order =  c("COI", "MV-Index", "MV-Staged"), covariate = fup, covariate.model = "independent", rank.preference = "lower"))
network$data
network$Treat.order
network$data
network$Treat.order
network$Study.order
Outcomes <- c(1, 1, 3, 4, 2, 4, 7, 14, 0, 7, 20, 3, 0, 2, 4, 15, 16, 11, 8, 7, 28, 7, 10, 9, 14, 109, 160)
N <- c(52, 17, 48, 44, 65, 65, 84, 79, 40, 234, 231, 46, 43, 150, 146, 314, 313, 106, 108, 295, 590, 264, 263, 215, 213, 2016, 2025)
Study <- c
Study <- c("HELP AMI", "HELP AMI", "PRIMA", "PRIMA", "Politi et al", "Politi et al", "Politi et al", "Ghani et al", "Ghani et al", "PRAMI", "PRAMI", "Tarasov RS et al", "Tarasov RS et al", "CvLPRIT", "CvLPRIT", "DANAMI-3-PRIMULTI", "DANAMI-3-PRIMULTI", "PRAGUE 13", "PRAGUE 13", "COMPARE-ACUTE", "COMPARE-ACUTE", "SMILE", "SMILE", "Zhang et al", "Zhang et al", "COMPLETE", "COMPLETE")
Treat <- c("MV-Index", "COI", "MV-Index", "MV-Staged", "MV-Index", "MV-Staged", "COI", "MV-Staged", "COI", "MV-Index", "COI", "MV-Index", "MV-Staged", "MV-Index", "COI", "MV-Staged", "COI", "MV-Staged", "COI", "MV-Index", "COI", "MV-Index", "MV-Staged", "MV-Staged", "COI", "MV-Index", "MV-Staged")
fup <- c(12, 6, 30, 36, 23, 6, 12, 27, 38, 12, 12, 24, 36)
cardio_data <- list(Outcomes = Outcomes, N = N, Study = Study, Treat = Treat, covariate = fup)
network_n1 <- with(MI_data, nodesplit.network.data(Outcomes = Outcomes, Study = Study, Treat = Treat, N = N, response = "binomial", pair = c("MV-Index", "COI"), dic = FALSE))
result_n1 <- nodesplit.network.run(network_n1, n.run = 100000)
network_n2 <- with(MI_data, nodesplit.network.data(Outcomes = Outcomes, Study = Study, Treat = Treat, N = N, response = "binomial", pair = c("MV-Index", "MV-Staged"), dic = FALSE))
result_n2 <- nodesplit.network.run(network_n2, n.run = 100000)
network_n3 <- with(MI_data, nodesplit.network.data(Outcomes = Outcomes, Study = Study, Treat = Treat, N = N, response = "binomial", pair = c("COI", "MV-Staged"), dic = FALSE))
result_n3 <- nodesplit.network.run(network_n3, n.run = 100000)
summary(result_n1)$p_value
summary(result_n2)$p_value
summary(result_n3)$p_value
library(bnma)
network_n1 <- with(cardio_data, nodesplit.network.data(Outcomes = Outcomes, Study = Study, Treat = Treat, N = N, response = "binomial", pair = c("MV-Index", "COI"), dic = FALSE))
result_n1 <- nodesplit.network.run(network_n1, n.run = 100000)
network_n2 <- with(cardio_data, nodesplit.network.data(Outcomes = Outcomes, Study = Study, Treat = Treat, N = N, response = "binomial", pair = c("MV-Index", "MV-Staged"), dic = FALSE))
result_n2 <- nodesplit.network.run(network_n2, n.run = 100000)
network_n3 <- with(cardio_data, nodesplit.network.data(Outcomes = Outcomes, Study = Study, Treat = Treat, N = N, response = "binomial", pair = c("COI", "MV-Staged"), dic = FALSE))
result_n3 <- nodesplit.network.run(network_n3, n.run = 100000)
summary(result_n1)$p_value
summary(result_n2)$p_value
summary(result_n3)$p_value
help(nodesplit.network.data)
devtools::install_github("MikeJSeo/bnma")
knitr::opts_chunk$set(echo = TRUE)
library(bnma)
network_n1 <- with(cardio_data, nodesplit.network.data(Outcomes = Outcomes, Study = Study, Treat = Treat, N = N, response = "binomial", pair = c("MV-Index", "COI"), dic = FALSE))
generate.simulation <- function(Nstudies = NULL, Ncovariate = NULL, continuous.cov = NULL, pf = NULL, em = NULL,
b1 = NULL, b2 = NULL, sampleSize = c(50, 100), model.type = "gaussian"){
#treatment effect
d <- 1
sd <- 0.2
delta <- rnorm(Nstudies, d, sd)
studyid <- NULL
for(i in 1:Nstudies){
studyid <- c(studyid, rep(i, sample(sampleSize[1]:sampleSize[2], size = 1)))
}
#study baseline effect
if(model.type == "gaussian"){
alpha <- runif(Nstudies, -1, 1)
} else{
alpha <- runif(Nstudies, -1, 0)
}
treat <- rbinom(length(studyid), 1, 0.5)
#generating data
rho <- 0.3
len <- length(continuous.cov)
cov_matrix <- matrix(NA, nrow = len, ncol = len)
for(ii in 1:len){
for(jj in 1:len){
cov_matrix[ii,jj] <- rho^abs(ii - jj)
}
}
X <- matrix(NA, nrow = length(studyid), ncol = Ncovariate)
for(i in 1:length(studyid)){
X[i,continuous.cov] <-  mvrnorm(n = 1, mu = rep(0, len), cov_matrix)
}
X[,-continuous.cov] <- rbinom(length(studyid)* (Ncovariate - length(continuous.cov)), 1, 0.5)
# standardize X: binary and continuous variables in same scale
X <- apply(X, 2, scale)
data <- model.matrix(~ -1 +  X*treat)
meany <- alpha[studyid] + delta[studyid] * treat + X[,pf, drop = FALSE] %*% b1 + X[,em, drop = FALSE] %*% b2 * treat
sigmay <- 0.5
py <- expit(meany)
if(model.type == "gaussian"){
y <- rnorm(length(studyid), meany, sigmay)
} else if (model.type == "binary"){
y <- rbinom(length(studyid), 1, py)
}
data <- cbind(y = y, data = data, studyid = studyid)
data <- as.data.frame(data)
data$studyid <- as.factor(data$studyid)
return(data)
}
knitr::opts_chunk$set(tidy = TRUE, tidy.opts=list(blank=FALSE, width.cutoff=60), warning = FALSE, message=FALSE, echo = FALSE)
col_labels <- c(paste0("X", 1:10, ":treat"), "treat")
col_labels_glmmLasso <- c(paste0("X", 1:10, "_treat"), "treat")
correct_em <- c(0, 0, 0, 1, 1, 0, 0, 0, 0, 0)
correct_em_values <- c(0, 0, 0, 0.1, 0.1, 0, 0, 0, 0, 0)
Nstudies <- 5
Ncovariate <- 10
continuous.cov <- c(1, 2, 4, 6, 7, 8)
pf <- c(1,2,3,4,5)
em <- c(4,5)
b1 <- c(0.1, 0.1, 0.5, 0.3, 0.5)
b2 <- c(0.1, 0.1)
generate.simulation()
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2, model.type = model.type)
### parameters to change ###
col_labels <- c(paste0("X", 1:10, ":treat"), "treat")
col_labels_glmmLasso <- c(paste0("X", 1:10, "_treat"), "treat")
correct_em <- c(0, 0, 0, 1, 1, 0, 0, 0, 0, 0)
correct_em_values <- c(0, 0, 0, 0.1, 0.1, 0, 0, 0, 0, 0)
Nstudies <- 5
Ncovariate <- 10
continuous.cov <- c(1, 2, 4, 6, 7, 8)
pf <- c(1,2,3,4,5)
em <- c(4,5)
b1 <- c(0.1, 0.1, 0.5, 0.3, 0.5)
b2 <- c(0.1, 0.1)
glmm_oracle_formula <- as.formula("y ~ studyid + X1 + X2 + X3 + X4 + X5 + X4 * treat + X5 * treat + treat + (-1 + treat|studyid)")
glmm_full_formula <- as.formula("y ~ studyid + (X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10)*treat + (-1 + treat|studyid)")
step_full_formula <-  as.formula("y ~ studyid + (X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10)*treat")
glmmLasso_formula <- as.formula("y ~ as.factor(studyid) + X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10 + X1_treat + X2_treat + X3_treat + X4_treat + X5_treat + X6_treat + X7_treat + X8_treat + X9_treat + X10_treat + treat")
model.type = "binary"
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2, model.type = model.type)
library(MASS) # Used for data simulation
library(lme4) #for fitting glmm
library(glmnet) #for lasso
library(glmmLasso) #for glmmLasso
library(dclone) # for parallel processing of JAGS code
library(knitr) # for tables
library(nlme) # for initial values for glmmLasso
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2, model.type = model.type)
#setwd("~/GitHub/phd/varselect")
setwd("C:/Users/mike/Desktop/Github/phd/varselect")
source("run.simulation.functions.modified2.R")
source("helpful.functions.R")
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2, model.type = model.type)
data$y
table(data$y)
171 / (171 + 187)
generate.simulation <- function(Nstudies = NULL, Ncovariate = NULL, continuous.cov = NULL, pf = NULL, em = NULL,
b1 = NULL, b2 = NULL, sampleSize = c(50, 100), model.type = "gaussian"){
#treatment effect
d <- 1
sd <- 0.2
delta <- rnorm(Nstudies, d, sd)
studyid <- NULL
for(i in 1:Nstudies){
studyid <- c(studyid, rep(i, sample(sampleSize[1]:sampleSize[2], size = 1)))
}
#study baseline effect
if(model.type == "gaussian"){
alpha <- runif(Nstudies, -1, 1)
} else{
alpha <- runif(Nstudies, -1, -0.5)
}
treat <- rbinom(length(studyid), 1, 0.5)
#generating data
rho <- 0.3
len <- length(continuous.cov)
cov_matrix <- matrix(NA, nrow = len, ncol = len)
for(ii in 1:len){
for(jj in 1:len){
cov_matrix[ii,jj] <- rho^abs(ii - jj)
}
}
X <- matrix(NA, nrow = length(studyid), ncol = Ncovariate)
for(i in 1:length(studyid)){
X[i,continuous.cov] <-  mvrnorm(n = 1, mu = rep(0, len), cov_matrix)
}
X[,-continuous.cov] <- rbinom(length(studyid)* (Ncovariate - length(continuous.cov)), 1, 0.5)
# standardize X: binary and continuous variables in same scale
X <- apply(X, 2, scale)
data <- model.matrix(~ -1 +  X*treat)
meany <- alpha[studyid] + delta[studyid] * treat + X[,pf, drop = FALSE] %*% b1 + X[,em, drop = FALSE] %*% b2 * treat
sigmay <- 0.5
py <- expit(meany)
if(model.type == "gaussian"){
y <- rnorm(length(studyid), meany, sigmay)
} else if (model.type == "binary"){
y <- rbinom(length(studyid), 1, py)
}
data <- cbind(y = y, data = data, studyid = studyid)
data <- as.data.frame(data)
data$studyid <- as.factor(data$studyid)
return(data)
}
data <-generate.simulation(Nstudies = Nstudies, Ncovariate = Ncovariate, continuous.cov = continuous.cov, pf = pf, em = em, b1 = b1, b2 = b2, model.type = model.type)
table(data$y
)
164 / (190 + 164)
knitr::opts_chunk$set(echo = TRUE)
library(bnma) #for analysis
library(ggplot2) #for plotting
library(plyr)
library(bnma)
library(bipd)
##load in data
ds <- generate_ipdma_example(type = "continuous")
ds2 <- generate_ipdma_example(type = "binary")
# continuous outcome
ipd <- with(ds, ipdma.model.onestage(y = y, study = studyid, treat = treat, X = cbind(z1, z2), response = "normal", shrinkage = "laplace", lambda.prior = list("dgamma",2,0.1)))
##To see the JAGS code used to run the model use the command:
cat(ipd$code)
samples <- ipd.run(ipd, pars.save = c("lambda", "beta", "gamma", "delta"), n.chains = 3, n.burnin = 500, n.iter = 5000)
samples <- samples[,-3] #remove delta[1] which is 0
summary(samples)
plot(samples) #traceplot and posterior of parameters
coda::gelman.plot(samples) #gelman diagnostic plot
# can also find treatment effect
treatment.effect(ipd, samples, newpatient = c(1,0.5))
# binary outcome
ipd <- with(ds2, ipdma.model.onestage(y = y, study = studyid, treat = treat, X = cbind(w1, w2), response = "binomial", shrinkage = "laplace"))
samples <- ipd.run(ipd, pars.save = c("lambda", "beta", "gamma", "delta"))
summary(samples)
# can also run methods in parallel using dclone package
samples2 <- ipd.run.parallel(ipd, pars.save = c("lambda", "beta", "gamma", "delta"))
summary(samples2)
#The github library ("bipd") contains functions for generating sample data and running Bayesian IPD-MA methods.
#library(devtools)
#devtools::install_github("MikeJSeo/bipd") #parallel package take a while to install
library(bipd)
##load in data
ds <- generate_ipdma_example(type = "continuous")
ds2 <- generate_ipdma_example(type = "binary")
devtools::install_github("MikeJSeo/bipd")
library(bipd)
##load in data
ds <- generate_ipdma_example(type = "continuous")
ds2 <- generate_ipdma_example(type = "binary")
# continuous outcome
ipd <- with(ds, ipdma.model.onestage(y = y, study = studyid, treat = treat, X = cbind(z1, z2), response = "normal", shrinkage = "laplace", lambda.prior = list("dgamma",2,0.1)))
##To see the JAGS code used to run the model use the command:
cat(ipd$code)
devtools::install_github("MikeJSeo/bipd")
library(bipd)
##load in data
ds <- generate_ipdma_example(type = "continuous")
ds2 <- generate_ipdma_example(type = "binary")
# continuous outcome
ipd <- with(ds, ipdma.model.onestage(y = y, study = studyid, treat = treat, X = cbind(z1, z2), response = "normal", shrinkage = "laplace", lambda.prior = list("dgamma",2,0.1)))
##To see the JAGS code used to run the model use the command:
cat(ipd$code)
samples <- ipd.run(ipd, pars.save = c("lambda", "beta", "gamma", "delta"), n.chains = 3, n.burnin = 500, n.iter = 5000)
summary(samples)
cat(ipd$code)
samples <- samples[,-3] #remove delta[1] which is 0
summary(samples)
plot(samples) #traceplot and posterior of parameters
coda::gelman.plot(samples) #gelman diagnostic plot
# can also find treatment effect
treatment.effect(ipd, samples, newpatient = c(1,0.5))
treatment.effect <- function(ipd = NULL, samples = NULL, newpatient = NULL,
reference = NULL, quantile = c(0.025, 0.5, 0.975)){
if(class(ipd) == "ipdma.onestage"){
newpatient <- (newpatient - ipd$scale_mean)/ipd$scale_sd
index0 <- which(colnames(samples[[1]]) == "delta[2]") #only works for IPD-MA
index1 <- grep("gamma", colnames(samples[[1]]))
index <- c(index0, index1)
samples2 <- samples[,index]
merged <- samples2[[1]]
for(i in 2:length(samples2)){
merged <- rbind(merged, samples2[[i]])
}
pred <- merged %*% c(1, newpatient)
mean1 <- mean(pred)
se1 <- sd(pred)
if(ipd$response == "normal"){
CI <- mean1 + qnorm(quantile)* se1
} else if(ipd$response == "binomial"){
CI <- exp(mean1 + qnorm(quantile)* se1)
}
names(CI) <- quantile
} else if (class(ipd) == "ipdma.onestage.deft"){
if(is.null(reference)){
stop("Need to specify reference group for deft approach")
}
newpatient <- newpatient - reference
} else{
stop("Calculating patient specific treatment effect is not yet implemented for this method")
}
return(CI)
}
setwd("C:/Users/mike/Desktop/Github/bipd/R")
devtools::document()
